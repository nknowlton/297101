{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Interactive Penguin Data Analysis with Python\"\n",
        "format:\n",
        "  html:\n",
        "    echo: false\n",
        "    code-tools: true\n",
        "    page-layout: full\n",
        "    toc: false\n",
        "---\n",
        "\n",
        "\n",
        "## Python Code\n"
      ],
      "id": "ac8ede3f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import panel as pn\n",
        "import hvplot.pandas\n",
        "\n",
        "# Enable panel extension for notebook and Quarto compatibility\n",
        "pn.extension()\n",
        "\n",
        "# Load the penguins dataset from seaborn\n",
        "from seaborn import load_dataset\n",
        "penguins = load_dataset('penguins').dropna()\n",
        "\n",
        "# Filter the dataset to use specific columns\n",
        "data_filtered = penguins[['bill_length_mm', 'flipper_length_mm']]\n",
        "\n",
        "# Function to modify data based on user selection\n",
        "def modify_data(data, violation_type):\n",
        "    updated_data = data.copy()\n",
        "    if violation_type == 'Add Linearity Violation':\n",
        "        updated_data['flipper_length_mm'] += np.sin(updated_data['bill_length_mm']) * 5\n",
        "    elif violation_type == 'Add Independence Violation':\n",
        "        updated_data['flipper_length_mm'] += [5 if i % 2 == 0 else -5 for i in range(len(updated_data))]\n",
        "    elif violation_type == 'Add Normality Violation':\n",
        "        updated_data['flipper_length_mm'] += np.random.choice([10, -10], size=len(updated_data))\n",
        "    elif violation_type == 'Add Equal Variance Violation':\n",
        "        updated_data['flipper_length_mm'] *= (np.random.rand(len(updated_data)) + 0.5)\n",
        "    return updated_data\n",
        "\n",
        "# Function to update the plot\n",
        "def update_plot(violation_type):\n",
        "    # Modify data based on selected violation\n",
        "    data_modified = modify_data(data_filtered, violation_type)\n",
        "\n",
        "    # Create scatter plot\n",
        "    scatter_plot = data_modified.hvplot.scatter(\n",
        "        x='bill_length_mm',\n",
        "        y='flipper_length_mm',\n",
        "        color='blue',\n",
        "        xlabel='Bill Length (mm)',\n",
        "        ylabel='Flipper Length (mm)',\n",
        "        title='Scatter Plot of Bill Length vs Flipper Length',\n",
        "        grid=True,\n",
        "        height=400,\n",
        "        width=600\n",
        "    )\n",
        "\n",
        "    # Calculate fitted values and residuals for diagnostic plot\n",
        "    slope = np.random.uniform(-1, 1)\n",
        "    intercept = np.random.uniform(0, 5)\n",
        "    fitted_values = slope * data_modified['bill_length_mm'] + intercept\n",
        "    residuals = data_modified['flipper_length_mm'] - fitted_values\n",
        "\n",
        "    # Create residuals vs fitted values plot\n",
        "    residuals_plot = hvplot.scatter(\n",
        "        x=fitted_values,\n",
        "        y=residuals,\n",
        "        color='blue',\n",
        "        xlabel='Fitted Values',\n",
        "        ylabel='Residuals',\n",
        "        title='Residuals vs Fitted Values',\n",
        "        grid=True,\n",
        "        height=300,\n",
        "        width=600\n",
        "    )\n",
        "\n",
        "    return pn.Column(scatter_plot, residuals_plot)\n",
        "\n",
        "# Dropdown widget for selecting violation type\n",
        "violation_type_widget = pn.widgets.Select(\n",
        "    name='Violation Type',\n",
        "    options=['Add Linearity Violation', 'Add Independence Violation', 'Add Normality Violation', 'Add Equal Variance Violation'],\n",
        "    value='Add Linearity Violation'\n",
        ")\n",
        "\n",
        "# Interactive panel for updating the plot\n",
        "interactive_plot = pn.bind(update_plot, violation_type=violation_type_widget)\n",
        "\n",
        "# Create a dashboard with the widgets and plots\n",
        "dashboard = pn.Column(\n",
        "    \"# Interactive Penguin Data Analysis\",\n",
        "    violation_type_widget,\n",
        "    interactive_plot\n",
        ")\n",
        "\n",
        "# Display the dashboard\n",
        "dashboard.servable()"
      ],
      "id": "8f2c8250",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "330c6964-f124-4b4c-ac12-63d3c7b4b154",
      "language": "python",
      "display_name": "'Python Interactive'",
      "path": "/home/nick/.local/share/jupyter/kernels/330c6964-f124-4b4c-ac12-63d3c7b4b154"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}